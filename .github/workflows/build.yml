name: Tauri Android Build

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version:
        description: '应用版本号'
        required: true
        default: '1.0.0'

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      GITHUB_WORKSPACE_PATH: ${{ github.workspace }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 设置JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: gradle

      - name: 设置Android SDK
        uses: android-actions/setup-android@v2

      - name: 安装Rust (带调试信息)
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rustfmt, clippy
          targets: armv7-linux-androideabi, aarch64-linux-android, i686-linux-android, x86_64-linux-android
      
      - name: 设置Cargo缓存 (优化版)
        uses: Swatinem/rust-cache@v2
        with:
          key: cargo-cache-android-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            cargo-cache-android-${{ hashFiles('**/Cargo.lock') }}
            cargo-cache-android-
      
      - name: Comprehensive Build Environment Check
        run: |
          echo "🔍 Comprehensive build environment check..."
          echo "\n=== Rust Environment Information ==="
          which rustc cargo rustup || echo "Some Rust tools not found"
          rustc --version || echo "rustc version check failed"
          cargo --version || echo "cargo version check failed"
          rustup --version || echo "rustup version check failed"
          echo "Installed target architectures:"
          rustup target list --installed || echo "Target architectures check failed"
          
          echo "\n=== Android Environment Information ==="
          echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
          echo "ANDROID_NDK_HOME: $ANDROID_NDK_HOME"
          echo "ANDROID_NDK_VERSION: ${{ env.ANDROID_NDK_VERSION }}"
          echo "ANDROID_SDK_VERSION: ${{ env.ANDROID_SDK_VERSION }}"
          echo "ANDROID_BUILD_TOOLS_VERSION: ${{ env.ANDROID_BUILD_TOOLS_VERSION }}"
          ls -la $ANDROID_SDK_ROOT || echo "SDK directory does not exist or no access permission"
          ls -la $ANDROID_NDK_HOME || echo "NDK directory does not exist or no access permission"
          
          echo "\n=== Node.js Environment Information ==="
          node --version || echo "Node.js version check failed"
          npm --version || echo "npm version check failed"
          echo "Globally installed npm packages:"
          npm list -g --depth=0 || echo "Failed to list global packages"
          
          echo "\n=== System Environment Information ==="
          echo "Current working directory: $(pwd)"
          echo "Operating system: $(uname -a)"
          echo "Memory information: $(free -m)"
          echo "Disk space: $(df -h)"
          echo "CPU information: $(lscpu | head -10)"
          
          echo "\n=== Environment Variables ==="
          printenv | sort | head -50
          
          echo "\n=== Tauri Related Checks ==="
          tauri --version || echo "Tauri CLI not found"
          echo "src-tauri directory contents:"
          ls -la src-tauri || echo "src-tauri directory does not exist"

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'

      - name: 安装依赖
        run: npm ci

      - name: 安装Tauri CLI
        run: npm install -g @tauri-apps/cli

      - name: 设置环境变量
        run: |
          echo "APP_NAME=${{ secrets.APP_NAME || 'WebView App' }}" >> $GITHUB_ENV
          echo "BUNDLE_ID=${{ secrets.BUNDLE_ID || 'com.tenrun.webview' }}" >> $GITHUB_ENV
          echo "APP_VERSION=${{ github.event.inputs.version || secrets.APP_VERSION || '1.0.0' }}" >> $GITHUB_ENV
          echo "REMOTE_URL=${{ secrets.REMOTE_URL || 'https://example.com' }}" >> $GITHUB_ENV

      - name: 构建Web应用
        run: npm run build

      # ✅ 初始化 Android 项目必须在解码 keystore 前
      - name: 初始化 Tauri Android 项目 (带调试信息)
        run: |
          echo "使用npx初始化Tauri Android项目..."
          echo "检查Tauri CLI版本..."
          tauri --version || echo "Tauri CLI未找到"
          echo "检查环境变量..."
          printenv | grep -E "APP_|BUNDLE_|REMOTE_|DEFAULT_"
          echo "开始初始化..."
          npx tauri android init --verbose || {
            echo "初始化失败，尝试使用更多调试选项..." >&2
            RUST_LOG=debug npx tauri android init --verbose
            exit 1
          }

      - name: 创建 Android 目录（确保存在）
        run: mkdir -p ${{ github.workspace }}/src-tauri/gen/android

      - name: 解码Keystore
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > ${{ github.workspace }}/src-tauri/gen/android/keystore.jks

      - name: 创建keystore.properties
        run: |
          cat > ${{ github.workspace }}/src-tauri/gen/android/keystore.properties << EOF
          storeFile=keystore.jks
          storePassword=${{ secrets.KEYSTORE_PASSWORD }}
          keyAlias=${{ secrets.KEY_ALIAS }}
          keyPassword=${{ secrets.KEY_PASSWORD }}
          EOF

      - name: 构建 Tauri Android APK
        run: npx tauri android build --release

      - name: 上传APK文件
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: ${{ github.workspace }}/src-tauri/gen/android/app/build/outputs/apk/release/app-release.apk

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: 下载构建产物
        uses: actions/download-artifact@v4
        with:
          name: app-release
          path: release

      - name: 创建GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: release/app-release.apk
          name: Release ${{ github.ref_name }}
          body: |
            Tauri WebView Android App ${{ github.ref_name }}
            
            自动构建的Android APK发布版本
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
